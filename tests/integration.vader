Include: _setup.vader

Execute (Setup autocmd wrappers):
  function g:SetupAutocmdWrappers()
    let g:neomake_test_finished = []
    function! OnNeomakeFinished(context)
      let g:neomake_test_finished += [a:context]
    endfunction

    let g:neomake_test_countschanged = []
    function! OnNeomakeCountsChanged(context)
      let g:neomake_test_countschanged += [a:context]
    endfunction

    augroup neomake_tests
      au!
      au User NeomakeFinished call OnNeomakeFinished(g:neomake_hook_context)
      au User NeomakeCountsChanged call OnNeomakeCountsChanged(g:neomake_hook_context)
    augroup END
  endfunction

Execute (Test Neomake on errors.sh with one maker):
  call g:SetupAutocmdWrappers()
  e! fixtures/errors.sh

  if executable('shellcheck')
    AssertEqual neomake#GetEnabledMakers('sh'), ['sh', 'shellcheck']
  else
    AssertEqual neomake#GetEnabledMakers('sh'), ['sh']
  endif

  AssertEqual len(g:neomake_test_finished), 0
  AssertEqual len(g:neomake_test_countschanged), 0
  RunNeomake sh
  AssertNotEqual getloclist(0), []
  AssertEqual len(g:neomake_test_finished), 1
  AssertEqual len(g:neomake_test_countschanged), 1

  let bufnr = bufnr('%')
  RunNeomake sh
  AssertEqual len(g:neomake_test_countschanged), 2
  for idx in range(0, len(g:neomake_test_countschanged))
    AssertEqual [idx, g:neomake_test_countschanged[1].file_mode], [idx, 1]
    AssertEqual [idx, g:neomake_test_countschanged[1].bufnr], [idx, bufnr]
  endfor

Execute (Test Neomake on errors.sh with two makers):
  if index(neomake#GetEnabledMakers('sh'), 'shellcheck') != -1
    call g:SetupAutocmdWrappers()
    e! fixtures/errors.sh
    RunNeomake sh shellcheck
    AssertEqual len(g:neomake_test_countschanged), 2
  endif

Execute (NeomakeSh):
  call g:SetupAutocmdWrappers()
  let bufnr = bufnr('%')

  RunNeomakeSh true
  AssertEqual g:neomake_test_countschanged, [{'bufnr': 3, 'file_mode': 0}]
  AssertEqual len(g:neomake_test_finished), 1
  AssertEqual getqflist(), []

  RunNeomakeSh 'nonexistingcommand'
  AssertEqual len(getqflist()), 1
  AssertNotEqual match(getqflist()[0].text, 'command not found: nonexistingcommand$'), -1
